# -*- coding: utf-8 -*-
"""Copie de eda_demoday.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NF87VN0LPHWIltXvDGbf4SBQEJ14OL3Z
"""

!pip install xmltodict

import numpy as np
import pandas as pd
import seaborn as sns
import os, json, random
from pathlib import Path
import argparse, glob, tqdm, time
from xml.etree import cElementTree as ElementTree
from xml.dom import minidom
import matplotlib.pyplot as plt
from PIL import Image
import xmltodict
from matplotlib.patches import Rectangle
import matplotlib.patches as patches
import matplotlib.patches as mpatches

"""# 1. Data Import"""

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content'

# %mkdir RoadDamageDataset 
# %cd RoadDamageDataset

# train set
!wget -c https://mycityreport.s3-ap-northeast-1.amazonaws.com/02_RoadDamageDataset/public_data/IEEE_bigdata_RDD2020/train.tar.gz
!tar xf train.tar.gz

"""# 2. Image and annotation reading"""

with open(r'/content/RoadDamageDataset/train/Czech/annotations/xmls/Czech_003560.xml', 'r') as f:
    data = f.read()
d = xmltodict.parse(data)
d

dict_color = {'D00': 'b',
              'D01': 'b',
              'D10': 'g',
              'D11': 'g',
              'D20': 'r',
              'D40': 'c', 
              'D43': 'm', 
              'D44': 'm', 
              'D50': 'y', 
              'D0w0': 'w'}
dict_defect = {'D00': 'Longitudinal Crack',
               'D01': 'Longitudinal Crack', 
               'D10': 'Transverse Crack', 
               'D11': 'Transverse Crack', 
               'D20': 'Aligator Crack', 
               'D40': 'Pothole', 
               'D43': 'White/Yellow Lines', 
               'D44': 'White/Yellow Lines', 
               'D50': 'Manhole', 
               'D0w0': 'Others'}

x = np.array(Image.open(r'/content/RoadDamageDataset/train/Czech/images/Czech_003560.jpg'))
fig, ax = plt.subplots(1, figsize=(10, 10))
ax.imshow(x)
for i in range(0, len(d['annotation']['object'])):
    defect_type = d['annotation']['object'][i]['name']
    xmin = int(d['annotation']['object'][i]['bndbox']['xmin'])
    xmax = int(d['annotation']['object'][i]['bndbox']['xmax'])
    ymin = int(d['annotation']['object'][i]['bndbox']['ymin'])
    ymax = int(d['annotation']['object'][i]['bndbox']['ymax'])
    ax.add_artist(Rectangle((xmin,ymin),xmax-xmin,ymax-ymin,
                    edgecolor = dict_color[defect_type],
                    label = dict_defect[defect_type],
                    facecolor = 'none',
                    lw = 2))

patches = [mpatches.Patch(color = list(dict_color.values())[i], label="{:s}".format(list(dict_defect.values())[i])) for i in [0,2,4,5,6,8,9]]

plt.legend(handles=patches)
plt.show()

"""# 3. Exploratory Descriptive Analysis

## 3.1. Main defaults distribution by country

### 3.1.1. Czech
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/RoadDamageDataset'

df_cz_cracks = pd.DataFrame()

dir_list = os.listdir('train/Czech/annotations/xmls/')
l_countd40 = []
l_countd00 = []
l_countd10 = []
l_countd20 = []
image_name = []
for item in dir_list:
    with open(r'train/Czech/annotations/xmls/' + item + '', 'r') as f:
        data = f.read()
        countd40 = 0
        countd00 = 0
        countd10 = 0
        countd20 = 0
        d = xmltodict.parse(data)
        if 'object' in d['annotation']:
            for i in range(0, len(d['annotation']['object'])):
                if (len(d['annotation']['object']) >= 2) & (type(d['annotation']['object']) == list):
                    defect_type = d['annotation']['object'][i]['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
                else:
                    defect_type = d['annotation']['object']['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
        l_countd40.append(countd40)
        l_countd00.append(countd00)
        l_countd10.append(countd10)
        l_countd20.append(countd20)
        image_name.append(item)


df_cz_cracks['file'] = image_name
df_cz_cracks['Long. Crack'] = l_countd00
df_cz_cracks['Trans. Crack'] = l_countd10
df_cz_cracks['Aligator Crack'] = l_countd20
df_cz_cracks['Pothole'] = l_countd40

df_cz_cracks['Defaults'] = df_cz_cracks.iloc[:,1:].sum(axis=1)
df_cz_cracks['Defaults'].value_counts()

sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.histplot(df_cz_cracks.iloc[:,1:5], multiple='dodge').set(title='Distribution of the main defaults - Czech');

ax = df_cz_cracks.iloc[:,1:5].sum().plot.bar()
for p in ax.patches:
    ax.annotate(str(round(p.get_height() / df_cz_cracks.iloc[:,1:5].sum().sum() * 100,1)) + "%", (p.get_x() + 0.15, p.get_height() * 1.005))
plt.title("Main defaults repartition - Czech");

"""### 3.1.2. India"""

df_india_cracks = pd.DataFrame()

dir_list = os.listdir('train/India/annotations/xmls/')
l_countd40 = []
l_countd00 = []
l_countd10 = []
l_countd20 = []
image_name = []
for item in dir_list:
    with open(r'train/India/annotations/xmls/' + item + '', 'r') as f:
        data = f.read()
        countd40 = 0
        countd00 = 0
        countd10 = 0
        countd20 = 0
        d = xmltodict.parse(data)
        if 'object' in d['annotation']:
            for i in range(0, len(d['annotation']['object'])):
                if (len(d['annotation']['object']) >= 2) & (type(d['annotation']['object']) == list):
                    defect_type = d['annotation']['object'][i]['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
                else:
                    defect_type = d['annotation']['object']['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
        l_countd40.append(countd40)
        l_countd00.append(countd00)
        l_countd10.append(countd10)
        l_countd20.append(countd20)
        image_name.append(item)


df_india_cracks['file'] = image_name
df_india_cracks['Long. Crack'] = l_countd00
df_india_cracks['Trans. Crack'] = l_countd10
df_india_cracks['Aligator Crack'] = l_countd20
df_india_cracks['Pothole'] = l_countd40

df_india_cracks['Defaults'] = df_india_cracks.iloc[:,1:].sum(axis=1)
df_india_cracks['Defaults'].value_counts()

sns.histplot(df_india_cracks.iloc[:,1:5], multiple='dodge', shrink=0.5).set(title='Distribution of the main defaults - India');

ax = df_india_cracks.iloc[:,1:5].sum().plot.bar()
for p in ax.patches:
    ax.annotate(str(round(p.get_height() / df_india_cracks.iloc[:,1:5].sum().sum() * 100,1)) + "%", (p.get_x() + 0.15, p.get_height() * 1.005))
plt.title("Main defaults repartition - India");

"""### 3.1.3. Japan"""

df_jp_cracks = pd.DataFrame()
dir_list = os.listdir('train/Japan/annotations/xmls/')
l_countd40 = []
l_countd00 = []
l_countd10 = []
l_countd20 = []
image_name = []
for item in dir_list:
    with open(r'train/Japan/annotations/xmls/' + item + '', 'r') as f:
        data = f.read()
        countd40 = 0
        countd00 = 0
        countd10 = 0
        countd20 = 0
        d = xmltodict.parse(data)
        if 'object' in d['annotation']:
            for i in range(0, len(d['annotation']['object'])):
                if (len(d['annotation']['object']) >= 2) & (type(d['annotation']['object']) == list):
                    defect_type = d['annotation']['object'][i]['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
                else:
                    defect_type = d['annotation']['object']['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
        l_countd40.append(countd40)
        l_countd00.append(countd00)
        l_countd10.append(countd10)
        l_countd20.append(countd20)
        image_name.append(item)


df_jp_cracks['file'] = image_name
df_jp_cracks['Long. Crack'] = l_countd00
df_jp_cracks['Trans. Crack'] = l_countd10
df_jp_cracks['Aligator Crack'] = l_countd20
df_jp_cracks['Pothole'] = l_countd40

df_jp_cracks['Defaults'] = df_jp_cracks.iloc[:,1:].sum(axis=1)
df_jp_cracks['Defaults'].value_counts()

sns.histplot(df_jp_cracks.iloc[:,1:5], multiple='dodge',  binwidth=0.8).set(title='Distribution of the main defaults - Japan');

ax = df_jp_cracks.iloc[:,1:5].sum().plot.bar()
for p in ax.patches:
    ax.annotate(str(round(p.get_height() / df_jp_cracks.iloc[:,1:5].sum().sum() * 100,1)) + "%", (p.get_x() + 0.15, p.get_height() * 1.005))
plt.title("Main defaults repartition - Japan");

ax = df_jp_cracks.iloc[:,1:5].sum().plot.bar()
df_india_cracks.iloc[:,1:5].sum().plot.bar(ax=ax, color = "red")
df_cz_cracks.iloc[:,1:5].sum().plot.bar(ax=ax, color = "green")
ax.legend(["Japan", "India", "Czech"]);
plt.title("Main defaults repartition - By country");
plt.show()

"""## 3.2. All defaults distribution by country

### 3.2.1. Czech
"""

df_cz_cracks = pd.DataFrame()

dir_list = os.listdir('train/Czech/annotations/xmls/')
l_countd40 = []
l_countd43 = []
l_countd00 = []
l_countd10 = []
l_countd20 = []
l_countd50 = []
l_countd0w0 = []
image_name = []
for item in dir_list:
    with open(r'train/Czech/annotations/xmls/' + item + '', 'r') as f:
        data = f.read()
        countd40 = 0
        countd43 = 0
        countd00 = 0
        countd10 = 0
        countd20 = 0
        countd50 = 0
        countd0w0 = 0
        d = xmltodict.parse(data)
        if 'object' in d['annotation']:
            for i in range(0, len(d['annotation']['object'])):
                if (len(d['annotation']['object']) >= 2) & (type(d['annotation']['object']) == list):
                    defect_type = d['annotation']['object'][i]['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00' or defect_type == 'D01':
                        countd00 += 1
                    elif defect_type == 'D10' or defect_type == 'D11':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
                    elif defect_type == 'D50':
                        countd50 += 1                    
                    elif defect_type == 'D0w0':
                        countd0w0 += 1
                    elif defect_type == 'D43' or defect_type == 'D44':
                        countd43 += 1
                else:
                    defect_type = d['annotation']['object']['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1                    
                    elif defect_type == 'D50':
                        countd50 += 1
                    elif defect_type == 'D0w0':
                        countd0w0 += 1
                    elif defect_type == 'D43' or defect_type == 'D44':
                        countd43 += 1
        l_countd40.append(countd40)
        l_countd43.append(countd43)
        l_countd00.append(countd00)
        l_countd10.append(countd10)
        l_countd20.append(countd20)
        l_countd50.append(countd50)
        l_countd0w0.append(countd0w0)
        image_name.append(item)


df_cz_cracks['file'] = image_name
df_cz_cracks['Long. Crack'] = l_countd00
df_cz_cracks['Trans. Crack'] = l_countd10
df_cz_cracks['Aligator Crack'] = l_countd20
df_cz_cracks['Pothole'] = l_countd40  
df_cz_cracks['Manhole'] = l_countd50 
df_cz_cracks['White/Yellow Lines'] = l_countd43  
df_cz_cracks['Others'] = l_countd0w0 
df_cz_cracks.iloc[:,1:8].sum()

df_cz_cracks['Defaults'] = df_cz_cracks.iloc[:,1:].sum(axis=1)
df_cz_cracks['Defaults'].value_counts()

sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.histplot(df_cz_cracks.iloc[:,1:8], multiple='dodge').set(title='Distribution of the defaults - Czech');

ax = df_cz_cracks.iloc[:,1:8].sum().plot.bar()
for p in ax.patches:
    ax.annotate(str(round(p.get_height() / df_cz_cracks.iloc[:,1:8].sum().sum() * 100,1)) + "%", (p.get_x() + 0.1, p.get_height() * 1.005))
plt.title("All defaults repartition - Czech");

"""### 3.1.2. India"""

df_india_cracks = pd.DataFrame()

dir_list = os.listdir('train/India/annotations/xmls/')
l_countd40 = []
l_countd43 = []
l_countd00 = []
l_countd10 = []
l_countd20 = []
l_countd50 = []
l_countd0w0 = []
image_name = []
for item in dir_list:
    with open(r'train/India/annotations/xmls/' + item + '', 'r') as f:
        data = f.read()
        countd40 = 0
        countd43 = 0
        countd00 = 0
        countd10 = 0
        countd20 = 0
        countd50 = 0
        countd0w0 = 0
        d = xmltodict.parse(data)
        if 'object' in d['annotation']:
            for i in range(0, len(d['annotation']['object'])):
                if (len(d['annotation']['object']) >= 2) & (type(d['annotation']['object']) == list):
                    defect_type = d['annotation']['object'][i]['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00' or defect_type == 'D01':
                        countd00 += 1
                    elif defect_type == 'D10' or defect_type == 'D11':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
                    elif defect_type == 'D50':
                        countd50 += 1                    
                    elif defect_type == 'D0w0':
                        countd0w0 += 1
                    elif defect_type == 'D43' or defect_type == 'D44':
                        countd43 += 1
                else:
                    defect_type = d['annotation']['object']['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1                    
                    elif defect_type == 'D50':
                        countd50 += 1
                    elif defect_type == 'D0w0':
                        countd0w0 += 1
                    elif defect_type == 'D43' or defect_type == 'D44':
                        countd43 += 1
        l_countd40.append(countd40)
        l_countd43.append(countd43)
        l_countd00.append(countd00)
        l_countd10.append(countd10)
        l_countd20.append(countd20)
        l_countd50.append(countd50)
        l_countd0w0.append(countd0w0)
        image_name.append(item)


df_india_cracks['file'] = image_name
df_india_cracks['Long. Crack'] = l_countd00
df_india_cracks['Trans. Crack'] = l_countd10
df_india_cracks['Aligator Crack'] = l_countd20
df_india_cracks['Pothole'] = l_countd40  
df_india_cracks['Manhole'] = l_countd50 
df_india_cracks['White/Yellow Lines'] = l_countd43  
df_india_cracks['Others'] = l_countd0w0
df_india_cracks.iloc[:,1:8].sum()

df_india_cracks['Defaults'] = df_india_cracks.iloc[:,1:].sum(axis=1)
df_india_cracks['Defaults'].value_counts()

sns.histplot(df_india_cracks.iloc[:,1:8], multiple='dodge', shrink=0.5).set(title='Distribution of the defaults - India');

ax = df_india_cracks.iloc[:,1:8].sum().plot.bar()
for p in ax.patches:
    ax.annotate(str(round(p.get_height() / df_india_cracks.iloc[:,1:8].sum().sum() * 100,1)) + "%", (p.get_x() + 0.1, p.get_height() * 1.005))
plt.title("All defaults repartition - India");

"""### 3.1.3. Japan"""

df_jp_cracks = pd.DataFrame()
dir_list = os.listdir('train/Japan/annotations/xmls/')
l_countd40 = []
l_countd43 = []
l_countd00 = []
l_countd10 = []
l_countd20 = []
l_countd50 = []
l_countd0w0 = []
image_name = []
for item in dir_list:
    with open(r'train/Japan/annotations/xmls/' + item + '', 'r') as f:
        data = f.read()
        countd40 = 0
        countd43 = 0
        countd00 = 0
        countd10 = 0
        countd20 = 0
        countd50 = 0
        countd0w0 = 0
        d = xmltodict.parse(data)
        if 'object' in d['annotation']:
            for i in range(0, len(d['annotation']['object'])):
                if (len(d['annotation']['object']) >= 2) & (type(d['annotation']['object']) == list):
                    defect_type = d['annotation']['object'][i]['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00' or defect_type == 'D01':
                        countd00 += 1
                    elif defect_type == 'D10' or defect_type == 'D11':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1
                    elif defect_type == 'D50':
                        countd50 += 1                    
                    elif defect_type == 'd0w0':
                        countd0w0 += 1
                    elif defect_type == 'D43' or defect_type == 'D44':
                        countd43 += 1
                else:
                    defect_type = d['annotation']['object']['name']
                    if defect_type == 'D40':
                        countd40 += 1
                    elif defect_type == 'D00':
                        countd00 += 1
                    elif defect_type == 'D10':
                        countd10 += 1
                    elif defect_type == 'D20':
                        countd20 += 1                    
                    elif defect_type == 'D50':
                        countd50 += 1
                    elif defect_type == 'd0w0':
                        countd0w0 += 1
                    elif defect_type == 'D43' or defect_type == 'D44':
                        countd43 += 1
        l_countd40.append(countd40)
        l_countd43.append(countd43)
        l_countd00.append(countd00)
        l_countd10.append(countd10)
        l_countd20.append(countd20)
        l_countd50.append(countd50)
        l_countd0w0.append(countd0w0)
        image_name.append(item)


df_jp_cracks['file'] = image_name
df_jp_cracks['Long. Crack'] = l_countd00
df_jp_cracks['Trans. Crack'] = l_countd10
df_jp_cracks['Aligator Crack'] = l_countd20
df_jp_cracks['Pothole'] = l_countd40  
df_jp_cracks['Manhole'] = l_countd50 
df_jp_cracks['White/Yellow Lines'] = l_countd43  
df_jp_cracks['Others'] = l_countd0w0
df_jp_cracks.iloc[:,1:8].sum()

df_jp_cracks['Defaults'] = df_jp_cracks.iloc[:,1:].sum(axis=1)
df_jp_cracks['Defaults'].value_counts()

sns.histplot(df_jp_cracks.iloc[:,1:8], multiple='dodge',  binwidth=0.8).set(title='Distribution of the defaults - Japan');

ax = df_jp_cracks.iloc[:,1:8].sum().plot.bar()
for p in ax.patches:
    ax.annotate(str(round(p.get_height() / df_jp_cracks.iloc[:,1:8].sum().sum() * 100,1)) + "%", (p.get_x() + 0.1, p.get_height() * 1.005))
plt.title("All defaults repartition - Japan");

ax = df_jp_cracks.iloc[:,1:8].sum().plot.bar()
df_india_cracks.iloc[:,1:8].sum().plot.bar(ax=ax, color = "red")
df_cz_cracks.iloc[:,1:8].sum().plot.bar(ax=ax, color = "green")
ax.legend(["Japan", "India", "Czech"]);
plt.title("All defaults repartition - By country");
plt.show()